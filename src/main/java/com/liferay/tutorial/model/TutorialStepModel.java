package com.liferay.tutorial.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the TutorialStep service. Represents a row in the &quot;Tutorial_TutorialStep&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.tutorial.model.impl.TutorialStepModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.tutorial.model.impl.TutorialStepImpl}.
 * </p>
 *
 * @author Miroslav Ligas
 * @see TutorialStep
 * @see com.liferay.tutorial.model.impl.TutorialStepImpl
 * @see com.liferay.tutorial.model.impl.TutorialStepModelImpl
 * @generated
 */
public interface TutorialStepModel extends BaseModel<TutorialStep> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a tutorial step model instance should use the {@link TutorialStep} interface instead.
     */

    /**
     * Returns the primary key of this tutorial step.
     *
     * @return the primary key of this tutorial step
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this tutorial step.
     *
     * @param primaryKey the primary key of this tutorial step
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the step ID of this tutorial step.
     *
     * @return the step ID of this tutorial step
     */
    public long getStepId();

    /**
     * Sets the step ID of this tutorial step.
     *
     * @param stepId the step ID of this tutorial step
     */
    public void setStepId(long stepId);

    /**
     * Returns the company ID of this tutorial step.
     *
     * @return the company ID of this tutorial step
     */
    public long getCompanyId();

    /**
     * Sets the company ID of this tutorial step.
     *
     * @param companyId the company ID of this tutorial step
     */
    public void setCompanyId(long companyId);

    /**
     * Returns the group ID of this tutorial step.
     *
     * @return the group ID of this tutorial step
     */
    public long getGroupId();

    /**
     * Sets the group ID of this tutorial step.
     *
     * @param groupId the group ID of this tutorial step
     */
    public void setGroupId(long groupId);

    /**
     * Returns the plid of this tutorial step.
     *
     * @return the plid of this tutorial step
     */
    public long getPlid();

    /**
     * Sets the plid of this tutorial step.
     *
     * @param plid the plid of this tutorial step
     */
    public void setPlid(long plid);

    /**
     * Returns the sequence of this tutorial step.
     *
     * @return the sequence of this tutorial step
     */
    public int getSequence();

    /**
     * Sets the sequence of this tutorial step.
     *
     * @param sequence the sequence of this tutorial step
     */
    public void setSequence(int sequence);

    /**
     * Returns the message of this tutorial step.
     *
     * @return the message of this tutorial step
     */
    public String getMessage();

    /**
     * Returns the localized message of this tutorial step in the language. Uses the default language if no localization exists for the requested language.
     *
     * @param locale the locale of the language
     * @return the localized message of this tutorial step
     */
    @AutoEscape
    public String getMessage(Locale locale);

    /**
     * Returns the localized message of this tutorial step in the language, optionally using the default language if no localization exists for the requested language.
     *
     * @param locale the local of the language
     * @param useDefault whether to use the default language if no localization exists for the requested language
     * @return the localized message of this tutorial step. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
     */
    @AutoEscape
    public String getMessage(Locale locale, boolean useDefault);

    /**
     * Returns the localized message of this tutorial step in the language. Uses the default language if no localization exists for the requested language.
     *
     * @param languageId the ID of the language
     * @return the localized message of this tutorial step
     */
    @AutoEscape
    public String getMessage(String languageId);

    /**
     * Returns the localized message of this tutorial step in the language, optionally using the default language if no localization exists for the requested language.
     *
     * @param languageId the ID of the language
     * @param useDefault whether to use the default language if no localization exists for the requested language
     * @return the localized message of this tutorial step
     */
    @AutoEscape
    public String getMessage(String languageId, boolean useDefault);

    @AutoEscape
    public String getMessageCurrentLanguageId();

    @AutoEscape
    public String getMessageCurrentValue();

    /**
     * Returns a map of the locales and localized messages of this tutorial step.
     *
     * @return the locales and localized messages of this tutorial step
     */
    public Map<Locale, String> getMessageMap();

    /**
     * Sets the message of this tutorial step.
     *
     * @param message the message of this tutorial step
     */
    public void setMessage(String message);

    /**
     * Sets the localized message of this tutorial step in the language.
     *
     * @param message the localized message of this tutorial step
     * @param locale the locale of the language
     */
    public void setMessage(String message, Locale locale);

    /**
     * Sets the localized message of this tutorial step in the language, and sets the default locale.
     *
     * @param message the localized message of this tutorial step
     * @param locale the locale of the language
     * @param defaultLocale the default locale
     */
    public void setMessage(String message, Locale locale, Locale defaultLocale);

    public void setMessageCurrentLanguageId(String languageId);

    /**
     * Sets the localized messages of this tutorial step from the map of locales and localized messages.
     *
     * @param messageMap the locales and localized messages of this tutorial step
     */
    public void setMessageMap(Map<Locale, String> messageMap);

    /**
     * Sets the localized messages of this tutorial step from the map of locales and localized messages, and sets the default locale.
     *
     * @param messageMap the locales and localized messages of this tutorial step
     * @param defaultLocale the default locale
     */
    public void setMessageMap(Map<Locale, String> messageMap,
        Locale defaultLocale);

    /**
     * Returns the position of this tutorial step.
     *
     * @return the position of this tutorial step
     */
    public int getPosition();

    /**
     * Sets the position of this tutorial step.
     *
     * @param position the position of this tutorial step
     */
    public void setPosition(int position);

    /**
     * Returns the node of this tutorial step.
     *
     * @return the node of this tutorial step
     */
    @AutoEscape
    public String getNode();

    /**
     * Sets the node of this tutorial step.
     *
     * @param node the node of this tutorial step
     */
    public void setNode(String node);

    /**
     * Returns the action of this tutorial step.
     *
     * @return the action of this tutorial step
     */
    @AutoEscape
    public String getAction();

    /**
     * Sets the action of this tutorial step.
     *
     * @param action the action of this tutorial step
     */
    public void setAction(String action);

    /**
     * Returns the action value of this tutorial step.
     *
     * @return the action value of this tutorial step
     */
    @AutoEscape
    public String getActionValue();

    /**
     * Sets the action value of this tutorial step.
     *
     * @param actionValue the action value of this tutorial step
     */
    public void setActionValue(String actionValue);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    public String[] getAvailableLanguageIds();

    public String getDefaultLanguageId();

    public void prepareLocalizedFieldsForImport() throws LocaleException;

    public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
        throws LocaleException;

    @Override
    public Object clone();

    @Override
    public int compareTo(com.liferay.tutorial.model.TutorialStep tutorialStep);

    @Override
    public int hashCode();

    @Override
    public CacheModel<com.liferay.tutorial.model.TutorialStep> toCacheModel();

    @Override
    public com.liferay.tutorial.model.TutorialStep toEscapedModel();

    @Override
    public com.liferay.tutorial.model.TutorialStep toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
